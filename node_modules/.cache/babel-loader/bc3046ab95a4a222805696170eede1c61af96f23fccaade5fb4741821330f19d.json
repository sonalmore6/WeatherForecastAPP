{"ast":null,"code":"var _jsxFileName = \"E:\\\\weatherapp\\\\weather-dashboard\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport WeatherCard from \"./WeatherCard\";\nimport WeatherGraph from \"./WeatherGraph\";\nimport SearchBar from \"./SearchBar\";\nimport ForecastCard from \"./ForecastCard\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const defaultCities = [\"New York\", \"London\", \"Paris\", \"Tokyo\", \"Mumbai\"];\n  const [cities, setCities] = useState([]);\n  const [selectedCity, setSelectedCity] = useState(null);\n  const fetchWeatherData = async city => {\n    try {\n      const response = await axios.get(`http://localhost:5000/api/weather/${city}`);\n      return response.data;\n    } catch (error) {\n      console.error(\"Error fetching weather data:\", error);\n      alert(`Unable to fetch data for ${city}.`);\n      return null;\n    }\n  };\n  useEffect(() => {\n    const initializeDefaultCities = async () => {\n      const dataPromises = defaultCities.map(city => fetchWeatherData(city));\n      const results = await Promise.all(dataPromises);\n      setCities(results.filter(data => data !== null));\n    };\n    initializeDefaultCities();\n  }, []);\n  const addCity = async city => {\n    if (cities.find(c => c.city === city)) {\n      alert(\"City already added.\");\n      return;\n    }\n    const data = await fetchWeatherData(city);\n    if (data) setCities([...cities, data]);\n  };\n  const removeCity = city => {\n    setCities(cities.filter(c => c.city !== city));\n    if ((selectedCity === null || selectedCity === void 0 ? void 0 : selectedCity.city) === city) setSelectedCity(null); // Deselect city if removed\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 4\n  }, this);\n}\n_s(App, \"1ET5O4FcDZj1XJeXTTvj07Inv7U=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","WeatherCard","WeatherGraph","SearchBar","ForecastCard","jsxDEV","_jsxDEV","App","_s","defaultCities","cities","setCities","selectedCity","setSelectedCity","fetchWeatherData","city","response","get","data","error","console","alert","initializeDefaultCities","dataPromises","map","results","Promise","all","filter","addCity","find","c","removeCity","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/weatherapp/weather-dashboard/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport WeatherCard from \"./WeatherCard\";\nimport WeatherGraph from \"./WeatherGraph\";\nimport SearchBar from \"./SearchBar\";\nimport ForecastCard from \"./ForecastCard\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nfunction App() {\n  const defaultCities = [\"New York\", \"London\", \"Paris\", \"Tokyo\", \"Mumbai\"];\n  const [cities, setCities] = useState([]);\n  const [selectedCity, setSelectedCity] = useState(null);\n\n  const fetchWeatherData = async (city) => {\n    try {\n      const response = await axios.get(`http://localhost:5000/api/weather/${city}`);\n      return response.data;\n    } catch (error) {\n      console.error(\"Error fetching weather data:\", error);\n      alert(`Unable to fetch data for ${city}.`);\n      return null;\n    }\n  };\n\n  useEffect(() => {\n   \n    const initializeDefaultCities = async () => {\n      const dataPromises = defaultCities.map((city) => fetchWeatherData(city));\n      const results = await Promise.all(dataPromises);\n      setCities(results.filter((data) => data !== null)); \n    };\n    initializeDefaultCities();\n  }, []);\n\n  const addCity = async (city) => {\n    if (cities.find((c) => c.city === city)) {\n      alert(\"City already added.\");\n      return;\n    }\n    const data = await fetchWeatherData(city);\n    if (data) setCities([...cities, data]);\n  };\n\n  const removeCity = (city) => {\n    setCities(cities.filter((c) => c.city !== city));\n    if (selectedCity?.city === city) setSelectedCity(null); // Deselect city if removed\n  };\n\n  return (\n   <div>\n    \n   </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,YAAY,MAAM,gBAAgB;AACzC,OAAOC,SAAS,MAAM,aAAa;AACnC,OAAOC,YAAY,MAAM,gBAAgB;AACzC,OAAO,sCAAsC;AAC7C,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAMC,aAAa,GAAG,CAAC,UAAU,EAAE,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,CAAC;EACxE,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACc,YAAY,EAAEC,eAAe,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAEtD,MAAMgB,gBAAgB,GAAG,MAAOC,IAAI,IAAK;IACvC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMhB,KAAK,CAACiB,GAAG,CAAC,qCAAqCF,IAAI,EAAE,CAAC;MAC7E,OAAOC,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpDE,KAAK,CAAC,4BAA4BN,IAAI,GAAG,CAAC;MAC1C,OAAO,IAAI;IACb;EACF,CAAC;EAEDhB,SAAS,CAAC,MAAM;IAEd,MAAMuB,uBAAuB,GAAG,MAAAA,CAAA,KAAY;MAC1C,MAAMC,YAAY,GAAGd,aAAa,CAACe,GAAG,CAAET,IAAI,IAAKD,gBAAgB,CAACC,IAAI,CAAC,CAAC;MACxE,MAAMU,OAAO,GAAG,MAAMC,OAAO,CAACC,GAAG,CAACJ,YAAY,CAAC;MAC/CZ,SAAS,CAACc,OAAO,CAACG,MAAM,CAAEV,IAAI,IAAKA,IAAI,KAAK,IAAI,CAAC,CAAC;IACpD,CAAC;IACDI,uBAAuB,CAAC,CAAC;EAC3B,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMO,OAAO,GAAG,MAAOd,IAAI,IAAK;IAC9B,IAAIL,MAAM,CAACoB,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAAChB,IAAI,KAAKA,IAAI,CAAC,EAAE;MACvCM,KAAK,CAAC,qBAAqB,CAAC;MAC5B;IACF;IACA,MAAMH,IAAI,GAAG,MAAMJ,gBAAgB,CAACC,IAAI,CAAC;IACzC,IAAIG,IAAI,EAAEP,SAAS,CAAC,CAAC,GAAGD,MAAM,EAAEQ,IAAI,CAAC,CAAC;EACxC,CAAC;EAED,MAAMc,UAAU,GAAIjB,IAAI,IAAK;IAC3BJ,SAAS,CAACD,MAAM,CAACkB,MAAM,CAAEG,CAAC,IAAKA,CAAC,CAAChB,IAAI,KAAKA,IAAI,CAAC,CAAC;IAChD,IAAI,CAAAH,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEG,IAAI,MAAKA,IAAI,EAAEF,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC;EAC1D,CAAC;EAED,oBACCP,OAAA;IAAA2B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEK,CAAC;AAET;AAAC5B,EAAA,CA7CQD,GAAG;AAAA8B,EAAA,GAAH9B,GAAG;AA+CZ,eAAeA,GAAG;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}